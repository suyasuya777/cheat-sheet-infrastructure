cheat-sheet-aws-cli.txt Ver 0.10

■■■■■■■■■■■■■■■■■■
■■■
■■■　Powershell
■■■
■■■■■■■■■■■■■■■■■■

【ﾛｸﾞ取得開始】

Start-Transcript -Path "D:\logs\ps_session.log" -Append

【ﾛｸﾞ取得終了（exit でも可）】

Stop-Transcript

【ﾛｸﾞ取得指定でPowershell起動】

powershell.exe -NoExit -Command "Start-Transcript -Path 'D:\logs\ps_session.log' -Append"

【teratermﾏｸﾛでPowershellを起動】

; teraterm_local_ps.ttl
; ローカルで PowerShell を起動し、Transcript も開始する例

; ローカルコマンド実行
localcmd 'powershell.exe -NoExit -Command "Start-Transcript -Path ''C:\Temp\teraterm_ps.log'' -Append"'



■■■■■■■■■■■■■■■■■■
■■■
■■■　ネットワーク
■■■
■■■■■■■■■■■■■■■■■■

====================================
■VPCの作成

　=============================
　自動作成される

　・VPC
　・ﾙｰﾄﾃｰﾌﾞﾙ     （ﾃﾞﾌｫﾙﾄ：設定なし）
　・ｾｷｭﾘﾃｨｸﾞﾙｰﾌﾟ （ﾃﾞﾌｫﾙﾄ：ｲﾝﾊﾞｳﾝﾄﾞ=全拒否、ｱｳﾄﾊﾞｳﾝﾄﾞ=全許可）
　・ﾈｯﾄﾜｰｸACL    （ﾃﾞﾌｫﾙﾄ：ｲﾝﾊﾞｳﾝﾄﾞ=全許可、ｱｳﾄﾊﾞｳﾝﾄﾞ=全許可）
　・DHCPｵﾌﾟｼｮﾝｾｯﾄ（ﾃﾞﾌｫﾙﾄ）

　CIDR（推奨）

　　10.0.0.0/16
　=============================
　※）同一VPC・同じSG　：ﾃﾞﾌｫﾙﾄ：ｲﾝﾊﾞｳﾝﾄﾞ=全許可
　※）同一VPC・異なるSG：ﾃﾞﾌｫﾙﾄ：ｲﾝﾊﾞｳﾝﾄﾞ=全拒否

aws ec2 create-vpc `
  --cidr-block 10.0.0.0/16 `
  --tag-specifications `
  'ResourceType=vpc,Tags=[{Key=Name,Value=myvpc}]'

====================================
■VPCの削除

　=============================
　事前削除が必要なもの

　・ｻﾌﾞﾈｯﾄ
　・IGW、NATGW
　・ﾙｰﾄﾃｰﾌﾞﾙ、ｾｷｭﾘﾃｨｸﾞﾙｰﾌﾟ、ﾈｯﾄﾜｰｸACL（ﾃﾞﾌｫﾙﾄ以外）
　・EC2、RDS、ECS
　・VPCｴﾝﾄﾞﾎﾟｲﾝﾄ
　・VPCﾋﾟｱﾘﾝｸﾞ
　=============================

aws ec2 delete-vpc --vpc-id $(aws ec2 describe-vpcs `
  --filters "Name=tag:Name,Values=myvpc" `
  --query "Vpcs[0].VpcId" `
  --output text)

====================================
■ｻﾌﾞﾈｯﾄの作成

　=============================
　ﾙｰﾄﾃｰﾌﾞﾙ

　・ﾃﾞﾌｫﾙﾄ（VPC内はlocal）

　CIDR（推奨）

　　10.0.0.0/24
　　10.0.1.0/24
　　10.0.2.0/24
　　10.0.3.0/24
　=============================

------------------------------------
VPC_ID=$(aws ec2 describe-vpcs `
  --filters "Name=tag:Name,Values=myvpc" `
  --query "Vpcs[0].VpcId" `
  --output text)

------------------------------------
aws ec2 create-subnet `
  --vpc-id $VPC_ID `
  --cidr-block 10.0.0.0/24 `
  --availability-zone ap-northeast-1a `
  --tag-specifications 'ResourceType=subnet,Tags=[{Key=Name,Value=public-subnet01}]'

....................................
aws ec2 create-subnet `
  --vpc-id $VPC_ID `
  --cidr-block 10.0.1.0/24 `
  --availability-zone ap-northeast-1c `
  --tag-specifications 'ResourceType=subnet,Tags=[{Key=Name,Value=public-subnet02}]'

....................................
aws ec2 create-subnet `
  --vpc-id $VPC_ID `
  --cidr-block 10.0.2.0/24 `
  --availability-zone ap-northeast-1a `
  --tag-specifications 'ResourceType=subnet,Tags=[{Key=Name,Value=private-subnet01}]'

....................................
aws ec2 create-subnet `
  --vpc-id $VPC_ID `
  --cidr-block 10.0.3.0/24 `
  --availability-zone ap-northeast-1c `
  --tag-specifications 'ResourceType=subnet,Tags=[{Key=Name,Value=private-subnet02}]'

====================================
■ｻﾌﾞﾈｯﾄの削除

aws ec2 delete-subnet `
  --subnet-id $(aws ec2 describe-subnets `
    --filters "Name=tag:Name,Values=********" `
    --query "Subnets[0].SubnetId" `
    --output text)

====================================
■ﾙｰﾄﾃｰﾌﾞﾙの作成

【ﾙｰﾄﾃｰﾌﾞﾙの作成】

【ﾙｰﾄﾃｰﾌﾞﾙをｻﾌﾞﾈｯﾄにｱﾀｯﾁ】

------------------------------------

VPC_ID=$(aws ec2 describe-vpcs `
  --filters "Name=tag:Name,Values=myvpc" `
  --query "Vpcs[0].VpcId" `
  --output text)

PUBLIC_SUBNET_ID1=$(aws ec2 describe-subnets `
  --filters "Name=tag:Name,Values=public-subnet01" `
  --query "Subnets[0].SubnetId" `
  --output text)

PUBLIC_SUBNET_ID2=$(aws ec2 describe-subnets `
  --filters "Name=tag:Name,Values=public-subnet02" `
  --query "Subnets[0].SubnetId" `
  --output text)

PRIVATE_SUBNET_ID1=$(aws ec2 describe-subnets `
  --filters "Name=tag:Name,Values=private-subnet01" `
  --query "Subnets[0].SubnetId" `
  --output text)

PRIVATE_SUBNET_ID2=$(aws ec2 describe-subnets `
  --filters "Name=tag:Name,Values=private-subnet02" `
  --query "Subnets[0].SubnetId" `
  --output text)

------------------------------------

【ﾙｰﾄﾃｰﾌﾞﾙの作成】

aws ec2 create-route-table `
  --vpc-id $VPC_ID `
  --tag-specifications 'ResourceType=route-table, `
  Tags=[{Key=Name,Value=public-rt}]'

PUBLIC_ROUTE_TABLE_ID=$(aws ec2 describe-route-tables `
  --filters "Name=tag:Name,Values=public-rt" `
  --query "RouteTables[0].RouteTableId" `
  --output text)

【ﾙｰﾄﾃｰﾌﾞﾙをｻﾌﾞﾈｯﾄにｱﾀｯﾁ】

aws ec2 associate-route-table `
  --route-table-id PUBLIC_ROUTE_TABLE_ID `
  --subnet-id $PUBLIC_SUBNET_ID1

------------------------------------

【ﾙｰﾄﾃｰﾌﾞﾙをｻﾌﾞﾈｯﾄにｱﾀｯﾁ】

aws ec2 associate-route-table `
  --route-table-id PUBLIC_ROUTE_TABLE_ID `
  --subnet-id $PUBLIC_SUBNET_ID2

------------------------------------

【ﾙｰﾄﾃｰﾌﾞﾙの作成】

aws ec2 create-route-table `
  --vpc-id $VPC_ID `
  --tag-specifications 'ResourceType=route-table, `
  Tags=[{Key=Name,Value=private-rt01}]'

PRIVATE_ROUTE_TABLE_ID1=$(aws ec2 describe-route-tables `
  --filters "Name=tag:Name,Values=private-rt01" `
  --query "RouteTables[0].RouteTableId" `
  --output text)

【ﾙｰﾄﾃｰﾌﾞﾙをｻﾌﾞﾈｯﾄにｱﾀｯﾁ】

aws ec2 associate-route-table `
  --route-table-id PRIVATE_ROUTE_TABLE_ID1 `
  --subnet-id $PRIVATE_SUBNET_ID1

------------------------------------

【ﾙｰﾄﾃｰﾌﾞﾙの作成】

aws ec2 create-route-table `
  --vpc-id $VPC_ID `
  --tag-specifications 'ResourceType=route-table, `
  Tags=[{Key=Name,Value=private-rt02}]'

PRIVATE_ROUTE_TABLE_ID2=$(aws ec2 describe-route-tables `
  --filters "Name=tag:Name,Values=private-rt02" `
  --query "RouteTables[0].RouteTableId" `
  --output text)

【ﾙｰﾄﾃｰﾌﾞﾙをｻﾌﾞﾈｯﾄにｱﾀｯﾁ】

aws ec2 associate-route-table `
  --route-table-id $PRIVATE_ROUTE_TABLE_ID2 `
  --subnet-id $PRIVATE_SUBNET_ID2

====================================
■IGWの作成

　=============================
　VPCに対して１つの構造

　・IGWはVPCにｱﾀｯﾁが必要
　・内部で冗長化されている
　・EC2、ALBで使用（ﾙｰﾄﾃｰﾌﾞﾙ、ｾｷｭﾘﾃｨｸﾞﾙｰﾌﾟ、ﾊﾟﾌﾞﾘｯｸIP）
　=============================

【ｲﾝﾀｰﾈｯﾄGWの作成】

【ｲﾝﾀｰﾈｯﾄGWをVPCにｱﾀｯﾁ】

【ﾙｰﾄﾃｰﾌﾞﾙの設定】

------------------------------------

VPC_ID=$(aws ec2 describe-vpcs `
  --filters "Name=tag:Name,Values=myvpc" `
  --query "Vpcs[0].VpcId" `
  --output text)

PUBLIC_ROUTE_TABLE_ID=$(aws ec2 describe-route-tables `
  --filters "Name=tag:Name,Values=public-rt" `
  --query "RouteTables[0].RouteTableId" `
  --output text)

------------------------------------

【ｲﾝﾀｰﾈｯﾄGWの作成】

aws ec2 create-internet-gateway `
  --tag-specifications 'ResourceType=internet-gateway, `
  Tags=[{Key=Name,Value=internet-gw}]'

IGW_ID=$(aws ec2 describe-internet-gateways `
  --filters "Name=tag:Name,Values=internet-gw" `
  --query "InternetGateways[0].InternetGatewayId" `
  --output text)

【ｲﾝﾀｰﾈｯﾄGWをVPCにｱﾀｯﾁ】

aws ec2 attach-internet-gateway `
  --internet-gateway-id $IGW_ID `
  --vpc-id $VPC_ID

【ﾙｰﾄﾃｰﾌﾞﾙの設定】

aws ec2 create-route `
  --route-table-id $PUBLIC_ROUTE_TABLE_ID `
  --destination-cidr-block 0.0.0.0/0 `
  --gateway-id $IGW_ID

====================================
■NATGWの作成

　=============================
　ﾊﾟﾌﾞﾘｯｸｻﾌﾞﾈｯﾄに対して１つの構造

　・ﾊﾟﾌﾞﾘｯｸｻﾌﾞﾈｯﾄに配置（ﾊﾟﾌﾞﾘｯｸIP付与）
　・ﾌﾟﾗｲﾍﾞｰﾄｻﾌﾞﾈｯﾄのﾙｰﾄﾃｰﾌﾞﾙにﾙｰﾄ追加
　=============================

【NATGWの作成】

【ﾙｰﾄﾃｰﾌﾞﾙにﾙｰﾄ追加】

------------------------------------

PUBLIC_SUBNET_ID1=$(aws ec2 describe-subnets `
  --filters "Name=tag:Name,Values=public-subnet01" `
  --query "Subnets[0].SubnetId" `
  --output text)

PUBLIC_SUBNET_ID2=$(aws ec2 describe-subnets `
  --filters "Name=tag:Name,Values=public-subnet02" `
  --query "Subnets[0].SubnetId" `
  --output text)

PRIVATE_ROUTE_TABLE_ID1=$(aws ec2 describe-route-tables `
  --filters "Name=tag:Name,Values=private-rt01" `
  --query "RouteTables[0].RouteTableId" `
  --output text)

PRIVATE_ROUTE_TABLE_ID2=$(aws ec2 describe-route-tables `
  --filters "Name=tag:Name,Values=private-rt02" `
  --query "RouteTables[0].RouteTableId" `
  --output text)

ALLOCATION_ID1=$(aws ec2 allocate-address `
  --domain vpc `
  --query "AllocationId" `
  --output text)

ALLOCATION_ID2=$(aws ec2 allocate-address `
  --domain vpc `
  --query "AllocationId" `
  --output text)
------------------------------------

【NATGWの作成】

aws ec2 create-nat-gateway `
  --subnet-id PUBLIC_SUBNET_ID1 `
  --allocation-id $ALLOCATION_ID1 `
  --tag-specifications 'ResourceType=natgateway, `
  Tags=[{Key=Name,Value=nat-gw01}]'

NATGW_ID1=$(aws ec2 describe-nat-gateways `
  --filter "Name=tag:Name,Values=nat-gw01" `
  --query "NatGateways[0].NatGatewayId" `
  --output text)

【ﾙｰﾄﾃｰﾌﾞﾙにﾙｰﾄ追加】

aws ec2 create-route `
  --route-table-id $PRIVATE_ROUTE_TABLE_ID1 `
  --destination-cidr-block 0.0.0.0/0 `
  --nat-gateway-id $NATGW_ID1

------------------------------------

【NATGWの作成】

aws ec2 create-nat-gateway `
  --subnet-id PUBLIC_SUBNET_ID2= `
  --allocation-id $ALLOCATION_ID2 `
  --tag-specifications 'ResourceType=natgateway, `
  Tags=[{Key=Name,Value=nat-gw02}]'

NATGW_ID2=$(aws ec2 describe-nat-gateways `
  --filter "Name=tag:Name,Values=nat-gw02" `
  --query "NatGateways[0].NatGatewayId" `
  --output text)

【ﾙｰﾄﾃｰﾌﾞﾙにﾙｰﾄ追加】

aws ec2 create-route `
  --route-table-id $PRIVATE_ROUTE_TABLE_ID2 `
  --destination-cidr-block 0.0.0.0/0 `
  --nat-gateway-id $NATGW_ID2

====================================
■ｾｷｭﾘﾃｨｸﾞﾙｰﾌﾟの作成（ALB用）

【ｾｷｭﾘﾃｨｸﾞﾙｰﾌﾟの作成】

【ｲﾝﾊﾞｳﾝﾄﾞﾙｰﾙの追加】

------------------------------------

VPC_ID=$(aws ec2 describe-vpcs `
  --filters "Name=tag:Name,Values=myvpc" `
  --query "Vpcs[0].VpcId" `
  --output text)

【ｾｷｭﾘﾃｨｸﾞﾙｰﾌﾟの作成】

aws ec2 create-security-group `
  --group-name web-alb-sg `
  --description "web-alb-sg" `
  --vpc-id $VPC_ID `
  --tag-specifications 'ResourceType=security-group, `
  Tags=[{Key=Name,Value=web-alb-sg}]'

------------------------------------

WEB_ALB_SG_ID=$(aws ec2 describe-security-groups `
  --filters "Name=group-name,Values=web-alb-sg" `
  --query "SecurityGroups[0].GroupId" `
  --output text)

【ｲﾝﾊﾞｳﾝﾄﾞﾙｰﾙの追加】

aws ec2 authorize-security-group-ingress `
  --group-id $WEB_ALB_SG_ID `
  --protocol tcp `
  --port 80 `
  --cidr 0.0.0.0/0

aws ec2 authorize-security-group-ingress `
  --group-id $WEB_ALB_SG_ID `
  --protocol tcp `
  --port 443 `
  --cidr 0.0.0.0/0

====================================

■■■■■■■■■■■■■■■■■■
■■■
■■■　コンピューティング
■■■
■■■■■■■■■■■■■■■■■■

====================================
■EC2の作成（Webｻｰﾊﾞ）

　=============================
　冗長構成の推奨作成手順

　・【1】EC2を構築
　・【1】Webｻｰﾊﾞをｲﾝｽﾄｰﾙし設定を完了
　・【2】ｲﾒｰｼﾞの作成でｶｽﾀﾑAMIを作成
　・【2】AMIからEC2を起動
　・【ALB】EC2をALBに登録
　・【ASG】作成したAMIを起動ﾃﾝﾌﾟﾚｰﾄに登録
　・【ASG】Auto Scaling Groupを作成

　=============================

【事前準備】

・ｷｰﾍﾟｱ
・VPC
・ﾊﾟﾌﾞﾘｯｸｻﾌﾞﾈｯﾄ（２つ）

【設定】

【ｷｰﾍﾟｱの作成】

【EC2の作成】
　・ｾｷｭﾘﾃｨｸﾞﾙｰﾌﾟ（ﾃﾞﾌｫﾙﾄ）
　・AMI ID（Amazon Linux2）
　・ｲﾝｽﾀﾝｽﾀｲﾌﾟ（t2.micro）
　・Public IP（無効）

【EC2のAMIを作成】

【AMIからEC2の作成】

------------------------------------

【ｷｰﾍﾟｱの作成】

aws ec2 create-key-pair `
  --key-name @@@@@@@@ `
  --query 'KeyMaterial' `
  --output text > my-key-pair.pem

chmod 400 my-key-pair.pem


VPC_ID=$(aws ec2 describe-vpcs `
  --filters "Name=tag:Name,Values=myvpc" `
  --query "Vpcs[0].VpcId" `
  --output text)

PUBLIC_SUBNET_ID1=$(aws ec2 describe-subnets `
  --filters "Name=tag:Name,Values=public-subnet01" `
  --query "Subnets[0].SubnetId" `
  --output text)

PUBLIC_SUBNET_ID2=$(aws ec2 describe-subnets `
  --filters "Name=tag:Name,Values=public-subnet02" `
  --query "Subnets[0].SubnetId" `
  --output text)

------------------------------------

【EC2の作成】

aws ec2 run-instances `
  --image-id ami-0c3fd0f5d33134a76 `
  --instance-type t2.micro `
  --key-name @@@@@@@@ `
  --subnet-id $PUBLIC_SUBNET_ID1 `
  --security-group-ids $(aws ec2 describe-security-groups `
      --filters "Name=group-name,Values=default" `
      --query "SecurityGroups[0].GroupId" `
      --output text) `
  --associate-public-ip-address false `
  --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=web01-ec2}]'

【EC2のAMIを作成】

INSTANCE_ID=$(aws ec2 describe-instances `
  --filters "Name=tag:Name,Values=web01-ec2" `
  --query "Reservations[*].Instances[*].InstanceId" `
  --output text)

aws ec2 create-image `
    --instance-id $INSTANCE_ID `
    --name "webserver-ami" `
    --description "AMI for redundant web server"

【AMIからEC2の作成】

AMI_ID=$(aws ec2 describe-images `
  --owners self `
  --filters "Name=name,Values=webserver-ami" `
  --query "Images[0].ImageId" `
  --output text)

aws ec2 run-instances `
    --image-id $AMI_ID `
  --instance-type t2.micro `
  --key-name @@@@@@@@ `
  --subnet-id $PUBLIC_SUBNET_ID2 `
  --security-group-ids $(aws ec2 describe-security-groups `
      --filters "Name=group-name,Values=default" `
      --query "SecurityGroups[0].GroupId" `
      --output text) `
  --associate-public-ip-address false `
  --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=web02-ec2}]'

====================================
■ﾛｰﾄﾞﾊﾞﾗﾝｻの作成

【事前準備】

・VPC
・ﾊﾟﾌﾞﾘｯｸｻﾌﾞﾈｯﾄ（２つ）
・ｾｷｭﾘﾃｨｸﾞﾙｰﾌﾟ（ALB用、ﾃﾞﾌｫﾙﾄ）

【設定】

【ﾛｰﾄﾞﾊﾞﾗﾝｻの作成】
　・ｽｷｰﾑ（外部公開）
　・type（ALB）

【ﾀｰｹﾞｯﾄｸﾞﾙｰﾌﾟの作成（ALB => ﾎﾟｰﾄ番号）】

【ﾘｽﾅｰの作成（ﾎﾟｰﾄ番号 => ALB）】

【ﾀｰｹﾞｯﾄｸﾞﾙｰﾌﾟの登録（EC2をﾀｰｹﾞｯﾄに紐づけ）】

------------------------------------

VPC_ID=$(aws ec2 describe-vpcs `
  --filters "Name=tag:Name,Values=myvpc" `
  --query "Vpcs[0].VpcId" `
  --output text)

PUBLIC_SUBNET_ID1=$(aws ec2 describe-subnets `
  --filters "Name=tag:Name,Values=public-subnet01" `
  --query "Subnets[0].SubnetId" `
  --output text)

PUBLIC_SUBNET_ID2=$(aws ec2 describe-subnets `
  --filters "Name=tag:Name,Values=public-subnet02" `
  --query "Subnets[0].SubnetId" `
  --output text)

WEB_ALB_SG_ID=$(aws ec2 describe-security-groups `
  --filters "Name=group-name,Values=web-alb-sg" `
  --query "SecurityGroups[0].GroupId" `
  --output text)

DEFAULT_SG_ID=$(aws ec2 describe-security-groups `
  --filters "Name=group-name,Values=default" "Name=vpc-id,Values=$VPC_ID" `
  --query "SecurityGroups[0].GroupId" `
  --output text)

------------------------------------

【ﾛｰﾄﾞﾊﾞﾗﾝｻの作成】

aws elbv2 create-load-balancer `
  --name web-alb `
  --subnets $PUBLIC_SUBNET_ID1 $PUBLIC_SUBNET_ID2 `
  --security-groups $WEB_ALB_SG_ID $DEFAULT_SG_ID `
  --scheme internet-facing `
  --type application `
  --ip-address-type ipv4 `
  --tags Key=Name,Value=web-alb

====================================

【ﾀｰｹﾞｯﾄｸﾞﾙｰﾌﾟの作成（ALB => ﾎﾟｰﾄ番号）】

aws elbv2 create-target-group `
  --name web-alb-tg `
  --protocol HTTP `
  --port 3000 `
  --vpc-id $VPC_ID `
  --target-type instance `
  --health-check-protocol HTTP `
  --health-check-path / `
  --health-check-interval-seconds 30 `
  --tags Key=Name,Value=web-alb-tg

====================================

【ﾘｽﾅｰの作成（ﾎﾟｰﾄ番号 => ALB）】

WEB_ALB_ARN=$(aws elbv2 describe-load-balancers `
  --names web-alb `
  --query "LoadBalancers[0].LoadBalancerArn" `
  --output text)

WEB_ALB_TG_ARN=$(aws elbv2 describe-target-groups `
  --names web-alb-tg `
  --query "TargetGroups[0].TargetGroupArn" `
  --output text)

aws elbv2 create-listener `
  --load-balancer-arn $WEB_ALB_ARN `
  --protocol HTTP `
  --port 80 `
  --default-actions Type=forward,TargetGroupArn=$WEB_ALB_TG_ARN

====================================

【ﾀｰｹﾞｯﾄｸﾞﾙｰﾌﾟの登録（EC2をﾀｰｹﾞｯﾄに紐づけ）】

EC2_INSTANCE_IDS=$(aws ec2 describe-instances `
  --filters "Name=tag:Name,Values=web01-ec2,web02-ec2" `
            "Name=instance-state-name,Values=running" `
  --query "Reservations[].Instances[].InstanceId" `
  --output text)

aws elbv2 register-targets `
  --target-group-arn $WEB_ALB_TG_ARN `
  --targets $(for id in $EC2_INSTANCE_IDS; do echo Id=$id,Port=3000; done)

====================================
■Auto Scallingの作成

　=============================

【事前準備】

・VPC
・ﾊﾟﾌﾞﾘｯｸｻﾌﾞﾈｯﾄ（２つ）
・ｾｷｭﾘﾃｨｸﾞﾙｰﾌﾟ（ALB用、ﾃﾞﾌｫﾙﾄ）

【設定】

【起動ﾃﾝﾌﾟﾚｰﾄの作成】

【Auto Scalling Groupの作成】
　ﾀｸﾞを指定する（ｲﾝｽﾀﾝｽの名前）

【ｽｹｰﾘﾝｸﾞﾎﾟﾘｼｰの追加】

　=============================

------------------------------------

AMI_ID=$(aws ec2 describe-images `
  --owners self `
  --filters "Name=name,Values=webserver-ami" `
  --query "Images[0].ImageId" `
  --output text)

------------------------------------

【起動ﾃﾝﾌﾟﾚｰﾄの作成】

aws ec2 create-launch-template `
  --launch-template-name webserver-template `
  --version-description "v1" `
  --launch-template-data '{
    "ImageId": "'"$AMI_ID"'",
    "InstanceType": "t2.micro",
    "KeyName": "@@@@@@@@",
    "SecurityGroupIds": ["sg-********"]
  }'

【Auto Scalling Groupの作成】

aws autoscaling create-auto-scaling-group `
  --auto-scaling-group-name webserver-asg `
  --launch-template "LaunchTemplateName=webserver-template,Version=1" `
  --min-size 2 `
  --max-size 4 `
  --desired-capacity 2 `
  --vpc-zone-identifier "subnet-********,subnet-********" `
  --target-group-arns arn:aws:******** `
  --health-check-type ELB `
  --health-check-grace-period 60 `
  --tags "Key=Name,Value=webserver,PropagateAtLaunch=true"

【ｽｹｰﾘﾝｸﾞﾎﾟﾘｼｰの追加】

aws cloudwatch put-metric-alarm `
  --alarm-name cpu-high-scale-out `
  --metric-name CPUUtilization `
  --namespace AWS/EC2 `
  --statistic Average `
  --period 60 `
  --threshold 70 `
  --comparison-operator GreaterThanThreshold `
  --dimensions Name=AutoScalingGroupName,Value=webserver-asg `
  --evaluation-periods 2 `
  --alarm-actions arn:aws:******** `
  --unit Percent


====================================
■RDSの作成

　=============================
　ﾏﾙﾁAZ構成

　・ﾌﾟﾗｲﾏﾘDBのﾚﾌﾟﾘｶを別AZに持つ
　・ﾌﾟﾗｲﾏﾘDBの障害時に自動ﾌｪｰﾙｵｰﾊﾞｰ
　・作成時にﾏﾙﾁAZ構成を指定可能
　・ｼﾝｸﾞﾙAZからﾏﾙﾁAZに変更可能
　=============================


【事前準備】

・VPC
・ﾌﾟﾗｲﾍﾞｰﾄｻﾌﾞﾈｯﾄ（２つ）

【設定】

【ﾊﾟﾗﾒｰﾀｸﾞﾙｰﾌﾟの作成】【任意】
　・ﾊﾟﾗﾒｰﾀｸﾞﾙｰﾌﾟﾌｧﾐﾘｰ（MySQL 8.0）

【ｵﾌﾟｼｮﾝｸﾞﾙｰﾌﾟの作成】【任意】
　・ｴﾝｼﾞﾝ（MySQL）
　・ﾒｼﾞｬｰｴﾝｼﾞﾝﾊﾞｰｼﾞｮﾝ（8.0）

【ｻﾌﾞﾈｯﾄｸﾞﾙｰﾌﾟの作成】【必須】
　・ﾌﾟﾗｲﾍﾞｰﾄｻﾌﾞﾈｯﾄを２つ

【DBｲﾝｽﾀﾝｽの作成】
　・ｾｷｭﾘﾃｨｸﾞﾙｰﾌﾟ（ﾃﾞﾌｫﾙﾄ）
　・ｻﾌﾞﾈｯﾄｸﾞﾙｰﾌﾟ
　・ﾏﾙﾁAZの指定

------------------------------------

VPC_ID=$(aws ec2 describe-vpcs `
  --filters "Name=tag:Name,Values=myvpc" `
  --query "Vpcs[0].VpcId" `
  --output text)

SUBNET_IDS=$(aws ec2 describe-subnets `
  --filters "Name=tag:Name,Values=private-subnet01,private-subnet02" `
  --query "Subnets[].SubnetId" `
  --output text)

DEFAULT_SG_ID=$(aws ec2 describe-security-groups `
  --filters "Name=group-name,Values=default" "Name=vpc-id,Values=$VPC_ID" `
  --query "SecurityGroups[0].GroupId" `
  --output text)

------------------------------------

【ﾊﾟﾗﾒｰﾀｸﾞﾙｰﾌﾟの作成】【任意】

aws rds create-db-parameter-group `
  --db-parameter-group-name rds-pq `
  --db-parameter-group-family mysql8.0 `
  --description "My MySQL 8.0 Parameter Group"


※）指定する場合

--db-parameter-group-name rds-pg
------------------------------------

【ｵﾌﾟｼｮﾝｸﾞﾙｰﾌﾟの作成】【任意】

aws rds create-option-group `
  --option-group-name rds-og `
  --engine-name mysql `
  --major-engine-version 8.0 `
  --option-group-description "My MySQL Option Group"

※）指定する場合

--option-group-name rds-og

------------------------------------

【ｻﾌﾞﾈｯﾄｸﾞﾙｰﾌﾟの作成】【必須】

aws rds create-db-subnet-group `
  --db-subnet-group-name rds-sg `
  --db-subnet-group-description "My DB Subnet Group" `
  --subnet-ids $SUBNET_IDS

------------------------------------

【DBｲﾝｽﾀﾝｽの作成】

aws rds create-db-instance `
  --db-instance-identifier rds `
  --db-instance-class db.t2.micro `
  --engine mysql `
  --engine-version 8.0.35 `
  --allocated-storage 20 `
  --master-username admin `
  --master-user-password '********' `
  --vpc-security-group-ids $DEFAULT_SG_ID `
  --db-subnet-group-name rds-sg `
  --multi-az `
  --tags Key=Name,Value=rds

====================================

■■■■■■■■■■■■■■■■■■
■■■
■■■　ＣｏｄｅＣｏｎｎｅｃｔｉｏｎ
■■■
■■■■■■■■■■■■■■■■■■

====================================

【接続状態の確認】

aws codestar-connections get-connection `
　 --connection-arn arn:aws:codeconnections:*************


====================================

■■■■■■■■■■■■■■■■■■
■■■
■■■　ＩＡＭ
■■■
■■■■■■■■■■■■■■■■■■

====================================

【実行ﾕｰｻﾞの確認】

aws sts get-caller-identity

------------------------------------

【ﾕｰｻﾞの所属ｸﾞﾙｰﾌﾟの確認】

aws iam list-groups-for-user `
  --user-name @@@@@@@@

====================================

【ｸﾞﾙｰﾌﾟにｱﾀｯﾁされてるﾎﾟﾘｼｰの一覧取得】

aws iam list-attached-group-policies `
  --group-name Developers

------------------------------------

【ｸﾞﾙｰﾌﾟにｱﾀｯﾁされてるｲﾝﾗｲﾝﾎﾟﾘｼｰの一覧取得】

aws iam list-group-policies `
  --group-name Developers

====================================

【ﾕｰｻﾞにｱﾀｯﾁされてるﾎﾟﾘｼｰの一覧取得】

aws iam list-attached-user-policies `
  --user-name @@@@@@@@

------------------------------------

【ﾕｰｻﾞにｱﾀｯﾁされてるｲﾝﾗｲﾝﾎﾟﾘｼｰの一覧取得】

aws iam list-user-policies `
  --user-name @@@@@@@@

------------------------------------

【ｲﾝﾗｲﾝﾎﾟﾘｼｰの内容取得】

aws iam get-user-policy `
  --user-name @@@@@@@@ `
  --policy-name Allow-CodeConnections-Use

====================================

【IAMﾛｰﾙの内容取得（信頼ﾎﾟﾘｼｰ）】

aws iam get-role `
　 --role-name project-prod-codebuild-role

------------------------------------

【IAMﾛｰﾙのｲﾝﾗｲﾝﾎﾟﾘｼｰの一覧取得】

aws iam list-role-policies `
  --role-name project-prod-codebuild-role

------------------------------------

【IAMﾛｰﾙに設定されているｲﾝﾗｲﾝﾎﾟﾘｼｰの内容取得】

aws iam get-role-policy `
  --role-name project-prod-codebuild-role `
  --policy-name project-prod-codebuild-inline-policy

====================================


■■■■■■■■■■■■■■■■■■
■■■
■■■　CloudWatch Log
■■■
■■■■■■■■■■■■■■■■■■

====================================

【ﾛｸﾞｸﾞﾙｰﾌﾟからﾛｸﾞｽﾄﾘｰﾑ名を取得】

aws logs describe-log-streams `
  --log-group-name "/project/prod/ecs" `
  --order-by "LastEventTime" `
  --descending `
  --limit 10 `
  --query "logStreams[].logStreamName"

------------------------------------
【ﾛｸﾞｽﾄﾘｰﾑ名からﾛｸﾞを取得】

aws logs get-log-events `
  --log-group-name "/project/prod/ecs" `
  --log-stream-name "front/front/a043c6fb7b20449eb6e17d6e8d39231e" `
  --limit 50

====================================
【ｸﾗｽﾀ名からﾀｽｸIDを取得】

aws ecs list-tasks `
  --cluster project-prod_ecs_cluster_app

------------------------------------

【ｸﾗｽﾀIDからﾀｽｸの状態を取得】

aws ecs describe-tasks `
  --cluster project-prod_ecs_cluster_app `
  --tasks a18617b4e24a4727ab4e9bcf9da3bc2f

====================================

■■■■■■■■■■■■■■■■■■
■■■
■■■　コンテナ
■■■
■■■■■■■■■■■■■■■■■■

====================================

【ECS Exec】

aws ecs execute-command `
  --cluster project-prod_ecs_cluster_app `
  --task 81be28d8c5cf4f7f9f369b174ef3b928 `
  --container app `
  --interactive `
  --command "/bin/sh"

====================================

■■■■■■■■■■■■■■■■■■
■■■
■■■　CloudFront
■■■
■■■■■■■■■■■■■■■■■■

====================================

【ｷｬｯｼｭｸﾘｱ】

aws cloudfront create-invalidation \
  --distribution-id E23O2AJ73IYW75 \
  --paths '/*'

====================================

【HEADﾘｸｴｽﾄを送信】
　ｱﾌﾟﾘｹｰｼｮﾝ層（PHP/WordPress）を通すために利用

curl -I -v https://linux-service.net

　-I：ﾍｯﾀﾞｰのみ取得
　-v：通信詳細（TCP接続開始、送信ﾍｯﾀﾞｰ受信ﾍｯﾀﾞｰ）を標準ｴﾗｰ出力

------------------------------------

【ｷｬｯｼｭﾊﾞｲﾊﾟｽ GETﾘｸｴｽﾄ】
　ｵﾘｼﾞﾝを通すために利用

curl.exe `
   -H "Cache-Control: no-cache" `
   -H "Host: linux-service.net" `
   ("https://linux-service.net/?_t=$((Get-Date -UFormat '%s'))")

curl.exe `
   -H "Cache-Control: no-cache" `
   -H "Host: linux-service.net" `
   ("https://alb.linux-service.net/?_t=$((Get-Date -UFormat '%s'))")

　-H "Cache-Control: no-cache"：ｷｬｯｼｭ済ｺﾝﾃﾝﾂではなくｵﾘｼﾞﾝから最新を取得 
　-H "Host: linux-service.net"：ﾍｯﾀﾞｰのHostを上書しALB のｶｽﾀﾑﾄﾞﾒｲﾝを直接たたける
　?_t=<タイムスタンプ>        ：ｸｴﾘを毎回ユニークにすることでｷｬｯｼｭをﾊﾞｲﾊﾟｽ

------------------------------------

【ｷｬｯｼｭﾊﾞｲﾊﾟｽ GETﾘｸｴｽﾄ詳細ﾃﾞﾊﾞｯｸﾞ】

curl.exe -v `
  -H "Cache-Control: no-cache" `
  -H "Host: linux-service.net" `
   ("https://linux-service.net/?_t=$((Get-Date -UFormat '%s'))")

curl.exe -v `
   -H "Cache-Control: no-cache" `
   -H "Host: linux-service.net" `
   ("https://alb.linux-service.net/?_t=$((Get-Date -UFormat '%s'))")

　-v                           :GETの全送受信（ﾍｯﾀﾞｰ・ﾎﾞﾃﾞｨ）を確認
　-H "Cache-Control: no-cache"：ｷｬｯｼｭ済ｺﾝﾃﾝﾂではなくｵﾘｼﾞﾝから最新を取得 
　-H "Host: linux-service.net"：ﾍｯﾀﾞｰのHostを上書しALB のｶｽﾀﾑﾄﾞﾒｲﾝを直接たたける
　?_t=<タイムスタンプ>        ：ｸｴﾘを毎回ユニークにすることでｷｬｯｼｭをﾊﾞｲﾊﾟｽ

====================================

■■■■■■■■■■■■■■■■■■
■■■
■■■　ユーザデータ
■■■
■■■■■■■■■■■■■■■■■■

====================================

【Cloud-Init ﾃﾞｰﾓﾝの動作ﾛｸﾞ】

各ﾓｼﾞｭｰﾙ（init, config, final など）がいつ何をしたか

sudo less /var/log/cloud-init.log

------------------------------------

【ﾕｰｻﾞﾃﾞｰﾀの動作ﾛｸﾞ】

（#cloud-config／#!/bin/bash）の標準出力・ｴﾗｰ

sudo less /var/log/cloud-init-output.log

------------------------------------

【ﾕｰｻﾞ作成ﾛｸﾞの推奨名】

sudo less /var/log/user-data-debug.log

====================================

【ｷｬｯｼｭや実行済みﾌﾗｸﾞを削除】

sudo cloud-init clean 

------------------------------------

【init ﾓｼﾞｭｰﾙを再実行】
　ﾈｯﾄﾜｰｸ設定取得、ﾎｽﾄ名設定、ﾕｰｻﾞﾃﾞｰﾀのﾀﾞｳﾝﾛｰﾄﾞ

sudo cloud-init init

------------------------------------

【configﾌｪｰｽﾞのﾓｼﾞｭｰﾙを再実行】
　cloud-config設定、ﾊﾟｯｹｰｼﾞｲﾝｽﾄｰﾙ、ﾌｧｲﾙ書込、ﾕｰｻﾞ作成

sudo cloud-init modules --mode=config

------------------------------------

【ﾕｰｻﾞﾃﾞｰﾀの実行】
　/var/lib/cloud/instance/scripts/part-*/を実行

sudo cloud-init modules --mode=final 

------------------------------------

【ﾕｰｻﾞ作成ﾛｸﾞの推奨名】
　各ﾓｼﾞｭｰﾙ（init／config／final）の実行状態

sudo cloud-init status --long

====================================

■■■■■■■■■■■■■■■■■■
■■■
■■■　Lambda起動（ALB->S3->Lambda->CloudWatch Logs）
■■■
■■■■■■■■■■■■■■■■■■

====================================

【S3の通知設定の確認】

aws s3api get-bucket-notification-configuration `
  --bucket project-prod-alb-logs-abcfrgh

------------------------------------

【LambdaのInvokePermissionの確認】

aws lambda get-policy `
  --function-name project-prod-lambda-alb-logs

------------------------------------

【S3の手動ｱｯﾌﾟﾛｰﾄﾞ】

"hello world" | Out-File -FilePath "$env:TEMP\test.log" -Encoding ascii

$inputFile  = "$env:TEMP\test.log"
$outputFile = "$env:TEMP\test.log.gz"
$bytes = [System.IO.File]::ReadAllBytes($inputFile)
$fs   = [System.IO.File]::OpenWrite($outputFile)
$gzip = New-Object System.IO.Compression.GzipStream($fs, [System.IO.Compression.CompressionMode]::Compress)
$gzip.Write($bytes, 0, $bytes.Length)
$gzip.Close()
$fs.Close()

aws s3 cp $outputFile "s3://project-prod-alb-logs-abcfrgh/dummy.log.gz"

------------------------------------

【Lambdaの手動実行】

@'
{
  "Records": [
    {
      "eventSource": "aws:s3",
      "s3": {
        "bucket": { "name": "project-prod-alb-logs-abcfrgh" },
        "object": { "key": "dummy.log.gz" }
      }
    }
  ]
}
'@ | Out-File -FilePath "$PWD\s3-test-event.json" -Encoding utf8

aws lambda invoke `
  --cli-binary-format raw-in-base64-out `
  --function-name project-prod-lambda-alb-logs `
  --payload file://./s3-test-event.json `
  response.json

Get-Content -Path "$PWD\response.json" | Out-String

====================================

■■■■■■■■■■■■■■■■■■
■■■
■■■　Lambda起動（Cloudfront->Kinesis Stream->Lambda->CloudWatch Logs）
■■■
■■■■■■■■■■■■■■■■■■

====================================

【CloudFrontのﾘｱﾙﾀｲﾑﾛｸﾞ設定の確認】

aws cloudfront get-realtime-log-config `
  --name project-prod-rtlog-config

------------------------------------

【CloudFront Distributionのﾃﾞﾌｫﾙﾄｷｬｯｼｭ動作で使用するﾘｱﾙﾀｲﾑﾛｸﾞ設定】

aws cloudfront get-distribution `
  --id E2GC2PJB4T0PY3 `
  --query "Distribution.DistributionConfig.DefaultCacheBehavior.RealtimeLogConfigArn"

------------------------------------

【Kinesis Streamのｽﾄﾘｰﾑ状態の確認】

aws kinesis describe-stream `
  --stream-name project-prod-cloudfront-rtlog `
  --query "StreamDescription.StreamStatus"

------------------------------------

【ｼｬｰﾄﾞのﾃﾞｰﾀの確認】

$iterator = aws kinesis get-shard-iterator `
  --stream-name project-prod-cloudfront-rtlog `
  --shard-id shardId-000000000000 `
  --shard-iterator-type TRIM_HORIZON `
  --query "ShardIterator" `
  --output text

$records = aws kinesis get-records `
  --shard-iterator $iterator `
  --limit 100 `
  --output json | ConvertFrom-Json


foreach ($rec in $records.Records) {
    $b64 = $rec.Data
    $bytes = [Convert]::FromBase64String($b64)
    $text  = [System.Text.Encoding]::UTF8.GetString($bytes)
    Write-Output "PartitionKey: $($rec.PartitionKey)"
    Write-Output "Timestamp  : $($rec.ApproximateArrivalTimestamp)"
    Write-Output "Data       : $text"
    Write-Output "--------------------------------"
}

------------------------------------

【Kinesis Streamからの読取権限の確認】

aws iam get-role-policy `
  --role-name project-prod-lambda-role `
  --policy-name project-prod-lambda-kinesis-read

------------------------------------

【CloudWatch Logsへの書込権限の確認】

aws iam get-role-policy `
  --role-name project-prod-lambda-role `
  --policy-name project-prod-cloudfront-log-write-policy

------------------------------------

【ﾃｽﾄ用ｲﾍﾞﾝﾄJSONを作成】


$fields = @(
  "1748395243.113",        # timestamp
  "133.32.165.0",          # c-ip
  "0.072",                 # time-to-first-byte
  "302",                   # sc-status
  "405",                   # sc-bytes
  "GET",                   # cs-method
  "https",                 # cs-protocol
  "linux-service.net",     # cs-host
  "/",                     # cs-uri-stem
  "NRT57-P2",              # x-edge-location
  "sample-request-id",     # x-edge-request-id
  "-",                     # cs-uri-query
  "Miss",                  # x-edge-response-result-type
  "Miss"                   # x-edge-detailed-result-type
)

$line = $fields -join "`t"
$b64 = [Convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes($line))

@"
{
  "Records": [
    {
      "kinesis": {
        "data": "$b64"
      },
      "eventSource": "aws:kinesis",
      "eventSourceARN": "arn:aws:kinesis:ap-northeast-1:672207842210:stream/project-prod-cloudfront-rtlog"
    }
  ]
}
"@ | Out-File -FilePath .\test-event.json -Encoding UTF8

------------------------------------

【Lambdaを手動実行】

aws lambda list-functions `
  --query 'Functions[].FunctionName' `
  --output text


aws lambda invoke `
  --cli-binary-format raw-in-base64-out `
  --function-name project-prod-cloudfront_to_cloudwatch_log `
  --payload file://./test-event.json `
  ./result.json

------------------------------------

【Kinesisでﾃﾞｰﾀ投入】

'{"message":"auto-test"}' | Out-File -FilePath .\payload.json -NoNewline -Encoding UTF8
$bytes = [System.Text.Encoding]::UTF8.GetBytes((Get-Content .\payload.json))
$b64   = [Convert]::ToBase64String($bytes)

aws kinesis put-record `
  --stream-name project-prod-cloudfront-rtlog `
  --partition-key testkey `
  --data $b64


------------------------------------

【Kinesisのデータ確認】

$streamName = 'project-prod-cloudfront-rtlog'
$shardId = aws kinesis describe-stream `
  --stream-name $streamName `
  --query "StreamDescription.Shards[0].ShardId" `
  --output text

$iterator = aws kinesis get-shard-iterator `
  --stream-name $streamName `
  --shard-id $shardId `
  --shard-iterator-type TRIM_HORIZON `
  --query "ShardIterator" `
  --output text


$raw = aws kinesis get-records `
  --shard-iterator $iterator `
  --limit 5

$raw | Write-Output

$records = ($raw | ConvertFrom-Json).Records

Write-Output "Found $($records.Count) records."

foreach ($rec in $records) {
  $rawText = [System.Text.Encoding]::UTF8.GetString([Convert]::FromBase64String($rec.Data))
  Write-Output $rawText
}

foreach ($rec in $records) {
  $rawText = [System.Text.Encoding]::UTF8.GetString([Convert]::FromBase64String($rec.Data)).Trim()
  # タブで分割
  $values = $rawText -split "`t"

  Write-Output "---- Record ----"
  for ($i = 0; $i -lt $values.Length; $i++) {
    # インデックスと値を表示
    Write-Output ("[{0}] {1}" -f $i, $values[$i])
  }
  Write-Output ""
}

$fieldNames = @(
  "timestamp",
  "c-ip",
  "time-to-first-byte",
  "sc-status",
  "sc-bytes",
  "cs-method",
  "cs-protocol",
  "cs-host",
  "cs-uri-stem",
  "x-edge-location",
  "x-edge-request-id",
  "cs-uri-query",
  "x-edge-response-result-type",
  "x-edge-detailed-result-type"
)

foreach ($rec in $records) {
  $rawText = [System.Text.Encoding]::UTF8.GetString([Convert]::FromBase64String($rec.Data))
  $values = $rawText -split "`t"
  for ($i = 0; $i -lt $fieldNames.Count; $i++) {
    Write-Output ("{0}: {1}" -f $fieldNames[$i], ($values[$i] -replace '"',''))
  }
  Write-Output "----------------------------------------"
}

------------------------------------
